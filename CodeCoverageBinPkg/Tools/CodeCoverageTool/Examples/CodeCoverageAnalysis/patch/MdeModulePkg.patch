Index: S:/MdeModulePkg/Include/Ppi/UsbHostController.h
===================================================================
--- S:/MdeModulePkg/Include/Ppi/UsbHostController.h	(revision 14442)
+++ S:/MdeModulePkg/Include/Ppi/UsbHostController.h	(working copy)
@@ -5,7 +5,7 @@
   Refer to section 16.1 of the UEFI 2.3 Specification for more information on 
   these interfaces.
  
-Copyright (c) 2006 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2006 - 2010, Intel Corporation. All rights reserved.<BR>
 
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -61,10 +61,7 @@
                                        On output, indicates the amount of data 
                                        actually transferred.
   @param[in]     TimeOut               Indicates the maximum time, in milliseconds, 
-                                       that the transfer is allowed to complete. 
-                                       If Timeout is 0, then the caller must wait for
-                                       the function to be completed until EFI_SUCCESS
-                                       or EFI_DEVICE_ERROR is returned.
+                                       that the transfer is allowed to complete.
   @param[out]    TransferResult        A pointer to the detailed result information 
                                        generated by this control transfer.
 
@@ -110,9 +107,6 @@
   @param[in,out] DataToggle            A pointer to the data toggle value.
   @param[in]     TimeOut               Indicates the maximum time, in milliseconds,
                                        in which the transfer is allowed to complete.
-                                       If Timeout is 0, then the caller must wait for
-                                       the function to be completed until EFI_SUCCESS
-                                       or EFI_DEVICE_ERROR is returned.
   @param[out]    TransferResult        A pointer to the detailed result information 
                                        of the bulk transfer.
 
Index: S:/MdeModulePkg/Include/Ppi/Usb2HostController.h
===================================================================
--- S:/MdeModulePkg/Include/Ppi/Usb2HostController.h	(revision 14442)
+++ S:/MdeModulePkg/Include/Ppi/Usb2HostController.h	(working copy)
@@ -5,7 +5,7 @@
   Refer to section 16.1 of the UEFI 2.3 Specification for more information on 
   these interfaces.
  
-Copyright (c) 2010 - 2013, Intel Corporation. All rights reserved. <BR>
+Copyright (c) 2010, Intel Corporation. All rights reserved. <BR>
 
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -62,9 +62,6 @@
                                        actually transferred.
   @param[in]     TimeOut               Indicates the maximum time, in milliseconds, 
                                        that the transfer is allowed to complete.
-                                       If Timeout is 0, then the caller must wait for
-                                       the function to be completed until EFI_SUCCESS
-                                       or EFI_DEVICE_ERROR is returned.
   @param[in]     Translator            A pointer to the transaction translator data.
   @param[out]    TransferResult        A pointer to the detailed result information 
                                        generated by this control transfer.
@@ -117,9 +114,6 @@
   @param[in,out] DataToggle            A pointer to the data toggle value.
   @param[in]     TimeOut               Indicates the maximum time, in milliseconds,
                                        in which the transfer is allowed to complete.
-                                       If Timeout is 0, then the caller must wait for
-                                       the function to be completed until EFI_SUCCESS
-                                       or EFI_DEVICE_ERROR is returned.
   @param[in]     Translator            A pointer to the transaction translator data.
   @param[out]    TransferResult        A pointer to the detailed result information 
                                        of the bulk transfer.
Index: S:/MdeModulePkg/Include/Ppi/UsbIo.h
===================================================================
--- S:/MdeModulePkg/Include/Ppi/UsbIo.h	(revision 14442)
+++ S:/MdeModulePkg/Include/Ppi/UsbIo.h	(working copy)
@@ -6,7 +6,7 @@
   Refer to section 16.2.4 of the UEFI 2.3 Specification for more information on 
   these interfaces.
 
-Copyright (c) 2006 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2006 - 2010, Intel Corporation. All rights reserved.<BR>
 
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -47,11 +47,8 @@
   @param[in]     Direction     Specifies the data direction for the transfer. There 
                                are three values available: 
                                EfiUsbDataIn, EfiUsbDataOut and EfiUsbNoData.
-  @param[in]     Timeout       Indicates the maximum time, in milliseconds, that 
+  @param[in]     TimeOut       Indicates the maximum time, in milliseconds, that 
                                the transfer is allowed to complete.
-                               If Timeout is 0, then the caller must wait for the
-                               function to be completed until EFI_SUCCESS or
-                               EFI_DEVICE_ERROR is returned.
   @param[in,out] Data          A pointer to the buffer of data that will be 
                                transmitted to or received from the USB device.
   @param[in]     DataLength    On input, indicates the size, in bytes, of the data 
@@ -85,13 +82,10 @@
 
   @param[in] PeiServices       The pointer to the PEI Services Table.
   @param[in] This              The pointer to this instance of the PEI_USB_IO_PPI.
-  @param[in] DeviceEndpoint    The endpoint address.
+  @param[in] EndPointAddress   The endpoint address.
   @param[in] Data              The data buffer to be transfered.
   @param[in] DataLength        The length of data buffer.
-  @param[in] Timeout           The timeout for the transfer, in milliseconds.
-                               If Timeout is 0, then the caller must wait for the
-                               function to be completed until EFI_SUCCESS or
-                               EFI_DEVICE_ERROR is returned.
+  @param[in] TimeOut           The timeout for the transfer, in milliseconds.
 
   @retval EFI_SUCCESS             The bulk transfer completed successfully.
   @retval EFI_INVALID_PARAMETER   Some parameters are invalid.
Index: S:/MdeModulePkg/Bus/Usb/UsbBusPei/UsbPeim.h
===================================================================
--- S:/MdeModulePkg/Bus/Usb/UsbBusPei/UsbPeim.h	(revision 14442)
+++ S:/MdeModulePkg/Bus/Usb/UsbBusPei/UsbPeim.h	(working copy)
@@ -1,7 +1,7 @@
 /** @file
 Usb Peim definition.
 
-Copyright (c) 2006 - 2013, Intel Corporation. All rights reserved. <BR>
+Copyright (c) 2006 - 2010, Intel Corporation. All rights reserved. <BR>
   
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -71,9 +71,7 @@
   @param  This                   The pointer of PEI_USB_IO_PPI.
   @param  Request                USB device request to send.
   @param  Direction              Specifies the data direction for the data stage.
-  @param  Timeout                Indicates the maximum timeout, in millisecond. If Timeout
-                                 is 0, then the caller must wait for the function to be
-                                 completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
+  @param  Timeout                Indicates the maximum timeout, in millisecond.
   @param  Data                   Data buffer to be transmitted or received from USB device.
   @param  DataLength             The size (in bytes) of the data buffer.
 
@@ -106,9 +104,7 @@
                                 from or receive into.
   @param  DataLength            The lenght of the data buffer.
   @param  Timeout               Indicates the maximum time, in millisecond, which the
-                                transfer is allowed to complete. If Timeout is 0, then
-                                the caller must wait for the function to be completed
-                                until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
+                                transfer is allowed to complete.
 
   @retval EFI_SUCCESS           The transfer was completed successfully.
   @retval EFI_OUT_OF_RESOURCES  The transfer failed due to lack of resource.
Index: S:/MdeModulePkg/Bus/Usb/UsbBusPei/UsbIoPeim.c
===================================================================
--- S:/MdeModulePkg/Bus/Usb/UsbBusPei/UsbIoPeim.c	(revision 14442)
+++ S:/MdeModulePkg/Bus/Usb/UsbBusPei/UsbIoPeim.c	(working copy)
@@ -1,7 +1,7 @@
 /** @file
 The module is used to implement Usb Io PPI interfaces.
 
-Copyright (c) 2006 - 2013, Intel Corporation. All rights reserved. <BR>
+Copyright (c) 2006 - 2010, Intel Corporation. All rights reserved. <BR>
   
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -24,9 +24,7 @@
   @param  This                   The pointer of PEI_USB_IO_PPI.
   @param  Request                USB device request to send.
   @param  Direction              Specifies the data direction for the data stage.
-  @param  Timeout                Indicates the maximum timeout, in millisecond. If Timeout
-                                 is 0, then the caller must wait for the function to be
-                                 completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
+  @param  Timeout                Indicates the maximum timeout, in millisecond.
   @param  Data                   Data buffer to be transmitted or received from USB device.
   @param  DataLength             The size (in bytes) of the data buffer.
 
@@ -98,9 +96,7 @@
                                 from or receive into.
   @param  DataLength            The lenght of the data buffer.
   @param  Timeout               Indicates the maximum time, in millisecond, which the
-                                transfer is allowed to complete. If Timeout is 0, then
-                                the caller must wait for the function to be completed
-                                until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
+                                transfer is allowed to complete.
 
   @retval EFI_SUCCESS           The transfer was completed successfully.
   @retval EFI_OUT_OF_RESOURCES  The transfer failed due to lack of resource.
Index: S:/MdeModulePkg/Bus/Pci/EhciPei/EhciSched.c
===================================================================
--- S:/MdeModulePkg/Bus/Pci/EhciPei/EhciSched.c	(revision 14442)
+++ S:/MdeModulePkg/Bus/Pci/EhciPei/EhciSched.c	(working copy)
@@ -2,7 +2,7 @@
 PEIM to produce gPeiUsb2HostControllerPpiGuid based on gPeiUsbControllerPpiGuid
 which is used to enable recovery function from USB Drivers.
 
-Copyright (c) 2010 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2010 - 2011, Intel Corporation. All rights reserved.<BR>
   
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -425,22 +425,12 @@
   UINTN                   Index;
   UINTN                   Loop;
   BOOLEAN                 Finished;
-  BOOLEAN                 InfiniteLoop;
 
   Status    = EFI_SUCCESS;
-  Loop      = TimeOut * EHC_1_MILLISECOND;
-  Finished     = FALSE;
-  InfiniteLoop = FALSE;
+  Loop      = (TimeOut * EHC_1_MILLISECOND / EHC_SYNC_POLL_INTERVAL) + 1;
+  Finished  = FALSE;
 
-  //
-  // If Timeout is 0, then the caller must wait for the function to be completed
-  // until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
-  //
-  if (TimeOut == 0) {
-    InfiniteLoop = TRUE;
-  }
-
-  for (Index = 0; InfiniteLoop || (Index < Loop); Index++) {
+  for (Index = 0; Index < Loop; Index++) {
     Finished = EhcCheckUrbResult (Ehc, Urb);
 
     if (Finished) {
@@ -447,7 +437,7 @@
       break;
     }
 
-    MicroSecondDelay (EHC_1_MICROSECOND);
+    MicroSecondDelay (EHC_SYNC_POLL_INTERVAL);
   }
 
   if (!Finished) {
Index: S:/MdeModulePkg/Bus/Pci/EhciPei/EhcPeim.c
===================================================================
--- S:/MdeModulePkg/Bus/Pci/EhciPei/EhcPeim.c	(revision 14442)
+++ S:/MdeModulePkg/Bus/Pci/EhciPei/EhcPeim.c	(working copy)
@@ -2,7 +2,7 @@
 PEIM to produce gPeiUsb2HostControllerPpiGuid based on gPeiUsbControllerPpiGuid
 which is used to enable recovery function from USB Drivers.
 
-Copyright (c) 2010 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2010 - 2012, Intel Corporation. All rights reserved.<BR>
   
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -532,8 +532,6 @@
                                 the subsequent bulk transfer.
   @param  TimeOut               Indicates the maximum time, in millisecond, which the
                                 transfer is allowed to complete.
-                                If Timeout is 0, then the caller must wait for the function
-                                to be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
   @param  Translator            A pointr to the transaction translator data.                                
   @param  TransferResult        A pointer to the detailed result information of the
                                 bulk transfer.
@@ -997,8 +995,6 @@
   @param  Data                   Data buffer to be transmitted or received from USB device.
   @param  DataLength             The size (in bytes) of the data buffer.
   @param  TimeOut                Indicates the maximum timeout, in millisecond.
-                                 If Timeout is 0, then the caller must wait for the function
-                                 to be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
   @param  Translator             Transaction translator to be used by this device.
   @param  TransferResult         Return the result of this control transfer.
 
Index: S:/MdeModulePkg/Bus/Pci/UhciPei/UhcPeim.h
===================================================================
--- S:/MdeModulePkg/Bus/Pci/UhciPei/UhcPeim.h	(revision 14442)
+++ S:/MdeModulePkg/Bus/Pci/UhciPei/UhcPeim.h	(working copy)
@@ -1,7 +1,7 @@
 /** @file
 Private Header file for Usb Host Controller PEIM
 
-Copyright (c) 2006 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2006 - 2010, Intel Corporation. All rights reserved.<BR>
   
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -94,7 +94,6 @@
 #define OUTPUT_PACKET_ID      0xE1
 #define ERROR_PACKET_ID       0x55
 
-#define STALL_1_MICRO_SECOND  1
 #define STALL_1_MILLI_SECOND  1000
 
 
Index: S:/MdeModulePkg/Bus/Pci/UhciPei/UhcPeim.c
===================================================================
--- S:/MdeModulePkg/Bus/Pci/UhciPei/UhcPeim.c	(revision 14442)
+++ S:/MdeModulePkg/Bus/Pci/UhciPei/UhcPeim.c	(working copy)
@@ -2,7 +2,7 @@
 PEIM to produce gPeiUsbHostControllerPpiGuid based on gPeiUsbControllerPpiGuid
 which is used to enable recovery function from USB Drivers.
 
-Copyright (c) 2006 - 2013, Intel Corporation. All rights reserved. <BR>
+Copyright (c) 2006 - 2010, Intel Corporation. All rights reserved. <BR>
   
 This program and the accompanying materials
 are licensed and made available under the terms and conditions
@@ -153,8 +153,6 @@
   @param  Data                   Data buffer to be transmitted or received from USB device.
   @param  DataLength             The size (in bytes) of the data buffer.
   @param  TimeOut                Indicates the maximum timeout, in millisecond.
-                                 If Timeout is 0, then the caller must wait for the function
-                                 to be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
   @param  TransferResult         Return the result of this control transfer.
 
   @retval EFI_SUCCESS            Transfer was completed successfully.
@@ -393,8 +391,6 @@
                                 the subsequent bulk transfer.
   @param  TimeOut               Indicates the maximum time, in millisecond, which the
                                 transfer is allowed to complete.
-                                If Timeout is 0, then the caller must wait for the function
-                                to be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
   @param  TransferResult        A pointer to the detailed result information of the
                                 bulk transfer.
 
@@ -2512,21 +2508,12 @@
 {
   UINTN   ErrTDPos;
   UINTN   Delay;
-  BOOLEAN InfiniteLoop;
 
   ErrTDPos          = 0;
   *TransferResult   = EFI_USB_NOERROR;
   *ActualLen        = 0;
-  InfiniteLoop      = FALSE;
 
-  Delay = TimeOut * STALL_1_MILLI_SECOND;
-  //
-  // If Timeout is 0, then the caller must wait for the function to be completed
-  // until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
-  //
-  if (TimeOut == 0) {
-    InfiniteLoop = TRUE;
-  }
+  Delay = (TimeOut * STALL_1_MILLI_SECOND / 200) + 1;
 
   do {
 
@@ -2538,11 +2525,12 @@
     if ((*TransferResult & EFI_USB_ERR_NOTEXECUTE) != EFI_USB_ERR_NOTEXECUTE) {
       break;
     }
-    MicroSecondDelay (STALL_1_MICRO_SECOND);
+    MicroSecondDelay (200);
     Delay--;
 
-  } while (InfiniteLoop || (Delay != 0));
+  } while (Delay != 0);
 
+
   if (*TransferResult != EFI_USB_NOERROR) {
     return EFI_DEVICE_ERROR;
   }
@@ -2578,21 +2566,12 @@
   UINTN   ErrTDPos;
   UINTN   ScrollNum;
   UINTN   Delay;
-  BOOLEAN InfiniteLoop;
 
   ErrTDPos          = 0;
   *TransferResult   = EFI_USB_NOERROR;
   *ActualLen        = 0;
-  InfiniteLoop      = FALSE;
 
-  Delay = TimeOut * STALL_1_MILLI_SECOND;
-  //
-  // If Timeout is 0, then the caller must wait for the function to be completed
-  // until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.
-  //
-  if (TimeOut == 0) {
-    InfiniteLoop = TRUE;
-  }
+  Delay = (TimeOut * STALL_1_MILLI_SECOND / 200) + 1;
 
   do {
 
@@ -2603,10 +2582,10 @@
     if ((*TransferResult & EFI_USB_ERR_NOTEXECUTE) != EFI_USB_ERR_NOTEXECUTE) {
       break;
     }
-    MicroSecondDelay (STALL_1_MICRO_SECOND);
+    MicroSecondDelay (200);
     Delay--;
 
-  } while (InfiniteLoop || (Delay != 0));
+  } while (Delay != 0);
 
   //
   // has error
Index: S:/MdeModulePkg/Bus/Pci/EhciDxe/EhciSched.c
===================================================================
--- S:/MdeModulePkg/Bus/Pci/EhciDxe/EhciSched.c	(revision 14442)
+++ S:/MdeModulePkg/Bus/Pci/EhciDxe/EhciSched.c	(working copy)
@@ -2,7 +2,7 @@
 
   EHCI transfer scheduling routines.
 
-Copyright (c) 2007 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2007 - 2011, Intel Corporation. All rights reserved.<BR>
 This program and the accompanying materials
 are licensed and made available under the terms and conditions of the BSD License
 which accompanies this distribution.  The full text of the license may be found at
@@ -694,7 +694,7 @@
   BOOLEAN                 InfiniteLoop;
 
   Status       = EFI_SUCCESS;
-  Loop         = TimeOut * EHC_1_MILLISECOND;
+  Loop         = (TimeOut * EHC_1_MILLISECOND / EHC_SYNC_POLL_INTERVAL) + 1;
   Finished     = FALSE;
   InfiniteLoop = FALSE;
 
@@ -714,7 +714,7 @@
       break;
     }
 
-    gBS->Stall (EHC_1_MICROSECOND);
+    gBS->Stall (EHC_SYNC_POLL_INTERVAL);
   }
 
   if (!Finished) {
Index: S:/MdeModulePkg/Bus/Pci/UhciDxe/UhciSched.c
===================================================================
--- S:/MdeModulePkg/Bus/Pci/UhciDxe/UhciSched.c	(revision 14442)
+++ S:/MdeModulePkg/Bus/Pci/UhciDxe/UhciSched.c	(working copy)
@@ -2,7 +2,7 @@
 
   The EHCI register operation routines.
 
-Copyright (c) 2007 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2007 - 2011, Intel Corporation. All rights reserved.<BR>
 This program and the accompanying materials
 are licensed and made available under the terms and conditions of the BSD License
 which accompanies this distribution.  The full text of the license may be found at
@@ -580,7 +580,7 @@
 
   Finished     = FALSE;
   Status       = EFI_SUCCESS;
-  Delay        = TimeOut * UHC_1_MILLISECOND;
+  Delay        = (TimeOut * UHC_1_MILLISECOND / UHC_SYNC_POLL_INTERVAL) + 1;
   InfiniteLoop = FALSE;
 
   //
@@ -602,7 +602,7 @@
       break;
     }
 
-    gBS->Stall (UHC_1_MICROSECOND);
+    gBS->Stall (UHC_SYNC_POLL_INTERVAL);
   }
 
   if (!Finished) {
Index: S:/MdeModulePkg/Bus/Pci/XhciDxe/Xhci.h
===================================================================
--- S:/MdeModulePkg/Bus/Pci/XhciDxe/Xhci.h	(revision 14442)
+++ S:/MdeModulePkg/Bus/Pci/XhciDxe/Xhci.h	(working copy)
@@ -2,7 +2,7 @@
 
   Provides some data structure definitions used by the XHCI host controller driver.
 
-Copyright (c) 2011 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2011 - 2012, Intel Corporation. All rights reserved.<BR>
 This program and the accompanying materials
 are licensed and made available under the terms and conditions of the BSD License
 which accompanies this distribution.  The full text of the license may be found at
@@ -42,10 +42,6 @@
 #include "ComponentName.h"
 
 //
-// The unit is microsecond, setting it as 1us.
-//
-#define XHC_1_MICROSECOND            (1)
-//
 // Convert millisecond to microsecond.
 //
 #define XHC_1_MILLISECOND            (1000)
Index: S:/MdeModulePkg/Bus/Pci/XhciDxe/XhciSched.c
===================================================================
--- S:/MdeModulePkg/Bus/Pci/XhciDxe/XhciSched.c	(revision 14442)
+++ S:/MdeModulePkg/Bus/Pci/XhciDxe/XhciSched.c	(working copy)
@@ -2,7 +2,7 @@
 
   XHCI transfer scheduling routines.
 
-Copyright (c) 2011 - 2013, Intel Corporation. All rights reserved.<BR>
+Copyright (c) 2011 - 2012, Intel Corporation. All rights reserved.<BR>
 This program and the accompanying materials
 are licensed and made available under the terms and conditions of the BSD License
 which accompanies this distribution.  The full text of the license may be found at
@@ -1101,7 +1101,7 @@
   }
 
   Status = EFI_SUCCESS;
-  Loop   = Timeout * XHC_1_MILLISECOND;
+  Loop   = (Timeout * XHC_1_MILLISECOND / XHC_POLL_DELAY) + 1;
   if (Timeout == 0) {
     Loop = 0xFFFFFFFF;
   }
@@ -1113,7 +1113,7 @@
     if (Urb->Finished) {
       break;
     }
-    gBS->Stall (XHC_1_MICROSECOND);
+    gBS->Stall (XHC_POLL_DELAY);
   }
 
   if (Index == Loop) {
Index: S:/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
===================================================================
--- S:/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c	(revision 14442)
+++ S:/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c	(working copy)
@@ -244,6 +244,17 @@
   PE_COFF_LOADER_IMAGE_CONTEXT  ImageContext;
 
   //
+  // Allocate the EFI System Table and EFI Runtime Service Table from EfiRuntimeServicesData
+  // Use the templates to initialize the contents of the EFI System Table and EFI Runtime Services Table
+  //
+  gDxeCoreST = AllocateRuntimeCopyPool (sizeof (EFI_SYSTEM_TABLE), &mEfiSystemTableTemplate);
+  ASSERT (gDxeCoreST != NULL);
+
+  gDxeCoreRT = AllocateRuntimeCopyPool (sizeof (EFI_RUNTIME_SERVICES), &mEfiRuntimeServicesTableTemplate);
+  ASSERT (gDxeCoreRT != NULL);
+
+  gDxeCoreST->RuntimeServices = gDxeCoreRT;
+  //
   // Setup the default exception handlers
   //
   SetupCpuExceptionHandlers ();
@@ -259,18 +270,6 @@
   CoreInitializeMemoryServices (&HobStart, &MemoryBaseAddress, &MemoryLength);
 
   //
-  // Allocate the EFI System Table and EFI Runtime Service Table from EfiRuntimeServicesData
-  // Use the templates to initialize the contents of the EFI System Table and EFI Runtime Services Table
-  //
-  gDxeCoreST = AllocateRuntimeCopyPool (sizeof (EFI_SYSTEM_TABLE), &mEfiSystemTableTemplate);
-  ASSERT (gDxeCoreST != NULL);
-
-  gDxeCoreRT = AllocateRuntimeCopyPool (sizeof (EFI_RUNTIME_SERVICES), &mEfiRuntimeServicesTableTemplate);
-  ASSERT (gDxeCoreRT != NULL);
-
-  gDxeCoreST->RuntimeServices = gDxeCoreRT;
-
-  //
   // Start the Image Services.
   //
   Status = CoreInitializeImageServices (HobStart);
